name: handle PR comments
on:
  issue_comment:
    types:
      - created

permissions:
  contents: read
  pull-requests: write
  actions: write

jobs:
  check_permission:
    name: "Check permission"
    if: github.event.issue.pull_request && startsWith(github.event.comment.body, '/test')
    runs-on: ubuntu-22.04
    outputs:
      continue: ${{ steps.check_permission.outputs.continue }}
    steps:
      - name: check permission
        id: check_permission
        run: |
          allow_permissions=("COLLABORATOR", "MEMBER")
          echo "user association is ${{ github.event.comment.author_association }}"
          if echo "${allow_permissions[@]}" | grep -qw "${{ github.event.comment.author_association }}"; then
            echo "ok"
            echo "continue=true" >> $GITHUB_OUTPUT
          else
            echo "skip"
            echo "To trigger the e2e test, the user must be an OWNER, COLLABORATOR, or MEMBER."
            echo "continue=false" >> $GITHUB_OUTPUT
          fi
  run_test:
    name: "Run e2e test"
    if: needs.check_permission.outputs.continue
    needs: check_permission
    runs-on: ubuntu-latest
    steps:
      - name: create reaction
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # https://docs.github.com/ja/rest/reactions/reactions?apiVersion=2022-11-28#create-reaction-for-an-issue-comment
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/issues/comments/${{ github.event.comment.id }}/reactions \
            -f content='rocket'
      - name: display github context
        run: |
          echo github
          echo '${{ toJSON(github) }}'
      - uses: actions/checkout@v4
      - name: trigger e2e
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          BRANCH_NAME=$(gh pr view --json headRefName --jq .headRefName ${{ github.event.issue.number }})
          echo "triggering e2e"
          gh workflow run --ref ${BRANCH_NAME} long-time-test-failure.yaml
          gh workflow run --ref ${BRANCH_NAME} long-time-test.yaml
